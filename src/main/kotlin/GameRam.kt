package com.ivieleague.smbtranslation

import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

class GameRam {
    val wholeBlock = ByteArray(0x800)

    private inner class Access(val index: Int) : ReadWriteProperty<Any?, Byte>, ByteAccess {
        override var value: Byte
            get() = wholeBlock[index]
            set(value) { wholeBlock[index] = value }
        override fun getValue(thisRef: Any?, property: KProperty<*>): Byte {
            return wholeBlock[index]
        }

        override fun setValue(thisRef: Any?, property: KProperty<*>, value: Byte) {
            wholeBlock[index] = value
        }
    }

    private inner class UAccess(val index: Int) : ReadWriteProperty<Any?, UByte>, ByteAccess {
        override var value: Byte
            get() = wholeBlock[index]
            set(value) { wholeBlock[index] = value.toByte() }
        override fun getValue(thisRef: Any?, property: KProperty<*>): UByte {
            return wholeBlock[index].toUByte()
        }

        override fun setValue(thisRef: Any?, property: KProperty<*>, value: UByte) {
            wholeBlock[index] = value.toByte()
        }
    }

    private inner class BooleanAccess(val index: Int, val trueValue: Byte = 0x1) : ReadWriteProperty<Any?, Boolean> {
        override fun getValue(thisRef: Any?, property: KProperty<*>): Boolean {
            return wholeBlock[index] != 0.toByte()
        }

        override fun setValue(thisRef: Any?, property: KProperty<*>, value: Boolean) {
            wholeBlock[index] = if (value) trueValue else 0
        }
    }

    inner class RangeAccess(val start: Int, val size: Int) {
        operator fun get(index: Int): Byte {
            assert(index < size)
            return wholeBlock[start + index]
        }

        operator fun set(index: Int, value: Byte) {
            assert(index < size)
            wholeBlock[start + index] = value
        }
    }

    val stack = Stack()

    inner class Stack {
        val data = ByteArray(0xFF)
        var currentIndex: Int = 0
        fun push(byte: Byte) {
            data[currentIndex++] = byte
        }

        fun pop(): Byte = data[--currentIndex]
        fun clear() {
            currentIndex = 0
        }
    }

    var objectOffset: Byte by Access(0x8)
    var frameCounter: Byte by Access(0x9)
    var savedJoypadBits: Byte by Access(0x6fc)
    var savedJoypad1Bits: Byte by Access(0x6fc)
    var savedJoypad2Bits: Byte by Access(0x6fd)
    var joypadBitMask: Byte by Access(0x74a)
    var joypadOverride: Byte by Access(0x758)
    var aBButtons: Byte by Access(0xa)
    var previousABButtons: Byte by Access(0xd)
    var upDownButtons: Byte by Access(0xb)
    var leftRightButtons: Byte by Access(0xc)
    var gameEngineSubroutine: Byte by Access(0xe)
    val mirrorPPUCTRLREG1 = PictureProcessingUnit.Control(Access(0x778))
    val mirrorPPUCTRLREG2 = PictureProcessingUnit.Mask(Access(0x779))
    var operMode: Byte by Access(0x770)
    var operModeTask: Byte by Access(0x772)
    var screenRoutineTask: Byte by Access(0x73c)
    var gamePauseStatus: Byte by Access(0x776)
    var gamePauseTimer: Byte by Access(0x777)
    var demoAction: Byte by Access(0x717)
    var demoActionTimer: Byte by Access(0x718)
    var timerControl: Byte by Access(0x747)
    var intervalTimerControl: Byte by Access(0x77f)
    val timers = RangeAccess(0x780, 0x23)
    var selectTimer: Byte by Access(0x780)
    var playerAnimTimer: Byte by Access(0x781)
    var jumpSwimTimer: Byte by Access(0x782)
    var runningTimer: Byte by Access(0x783)
    var blockBounceTimer: Byte by Access(0x784)
    var sideCollisionTimer: Byte by Access(0x785)
    var jumpspringTimer: Byte by Access(0x786)
    var gameTimerCtrlTimer: Byte by Access(0x787)
    var climbSideTimer: Byte by Access(0x789)
    var enemyFrameTimer: Byte by Access(0x78a)
    var frenzyEnemyTimer: Byte by Access(0x78f)
    var bowserFireBreathTimer: Byte by Access(0x790)
    var stompTimer: Byte by Access(0x791)
    var airBubbleTimer: Byte by Access(0x792)
    var scrollIntervalTimer: Byte by Access(0x795)
    var enemyIntervalTimer: Byte by Access(0x796)
    var brickCoinTimer: Byte by Access(0x79d)
    var injuryTimer: Byte by Access(0x79e)
    var starInvincibleTimer: Byte by Access(0x79f)
    var screenTimer: Byte by Access(0x7a0)
    var worldEndTimer: Byte by Access(0x7a1)
    var demoTimer: Byte by Access(0x7a2)
    var spriteData: Byte by Access(0x200)

    inner class Sprite(val offset: Int) {
        var y: UByte by UAccess(offset)
        var tilenumber: Byte by Access(offset + 1)
        //    76543210
        //    ||||||||
        //    ||||||++- Palette (4 to 7) of sprite
        //    |||+++--- Unimplemented (read 0)
        //    ||+------ Priority (0: in front of background; 1: behind background)
        //    |+------- Flip sprite horizontally
        //    +-------- Flip sprite vertically
        private val attributesAccess = Access(offset + 2)
        var attributes: Byte by attributesAccess
        var flipVertical: Boolean by BitAccess2(attributesAccess, 7)
        var flipHorizontal: Boolean by BitAccess2(attributesAccess, 6)
        var behindBackground: Boolean by BitAccess2(attributesAccess, 5)
        var palette: TwoBits by BitRangeAccess2(attributesAccess, 0, 1)
        var x: UByte by UAccess(offset + 3)
    }
    val sprites = Array(64) { Sprite(it * 4 + 0x200) }

    var screenEdgePageLoc: Byte by Access(0x71a)
    var screenEdgeXPos: Byte by Access(0x71c)
    var screenLeftPageLoc: Byte by Access(0x71a)
    var screenRightPageLoc: Byte by Access(0x71b)
    var screenLeftXPos: Byte by Access(0x71c)
    var screenRightXPos: Byte by Access(0x71d)
    var playerFacingDir: Byte by Access(0x33)
    var destinationPageLoc: Byte by Access(0x34)
    var victoryWalkControl: Byte by Access(0x35)
    var scrollFractional: Byte by Access(0x768)
    var primaryMsgCounter: Byte by Access(0x719)
    var secondaryMsgCounter: Byte by Access(0x749)
    var horizontalScroll: Byte by Access(0x73f)
    var verticalScroll: Byte by Access(0x740)
    var scrollLock: Byte by Access(0x723)
    var scrollThirtyTwo: Byte by Access(0x73d)
    var playerXScroll: Byte by Access(0x6ff)
    var playerPosForScroll: Byte by Access(0x755)
    var scrollAmount: Byte by Access(0x775)
    var areaData: Byte by Access(0xe7)
    var areaDataLow: Byte by Access(0xe7)
    var areaDataHigh: Byte by Access(0xe8)
    var enemyData: Byte by Access(0xe9)
    var enemyDataLow: Byte by Access(0xe9)
    var enemyDataHigh: Byte by Access(0xea)
    var areaParserTaskNum: Byte by Access(0x71f)
    var columnSets: Byte by Access(0x71e)
    var currentPageLoc: Byte by Access(0x725)
    var currentColumnPos: Byte by Access(0x726)
    var backloadingFlag: Byte by Access(0x728)
    var behindAreaParserFlag: Byte by Access(0x729)
    var areaObjectPageLoc: Byte by Access(0x72a)
    var areaObjectPageSel: Byte by Access(0x72b)
    var areaDataOffset: Byte by Access(0x72c)
    var areaObjOffsetBuffer: Byte by Access(0x72d)
    var areaObjectLength: Byte by Access(0x730)
    var staircaseControl: Byte by Access(0x734)
    var areaObjectHeight: Byte by Access(0x735)
    var mushroomLedgeHalfLen: Byte by Access(0x736)
    var enemyDataOffset: Byte by Access(0x739)
    var enemyObjectPageLoc: Byte by Access(0x73a)
    var enemyObjectPageSel: Byte by Access(0x73b)
    var metatileBuffer: Byte by Access(0x6a1)
    var blockBufferColumnPos: Byte by Access(0x6a0)
    var currentNTAddrLow: Byte by Access(0x721)
    var currentNTAddrHigh: Byte by Access(0x720)
    var attributeBuffer: Byte by Access(0x3f9)
    var loopCommand: Byte by Access(0x745)
    var displayDigits: Byte by Access(0x7d7)

    val topScoreDisplay = RangeAccess(0x7d7, 6)

    var scoreAndCoinDisplay: Byte by Access(0x7dd)
    var playerScoreDisplay: Byte by Access(0x7dd)
    var gameTimerDisplay: Byte by Access(0x7f8)
    var digitModifier: Byte by Access(0x134)
    var verticalFlipFlag: Byte by Access(0x109)
    var floateyNumControl: Byte by Access(0x110)
    var shellChainCounter: Byte by Access(0x125)
    var floateyNumTimer: Byte by Access(0x12c)
    var floateyNumXPos: Byte by Access(0x117)
    var floateyNumYPos: Byte by Access(0x11e)
    var flagpoleFNumYPos: Byte by Access(0x10d)
    var flagpoleFNumYMFDummy: Byte by Access(0x10e)
    var flagpoleScore: Byte by Access(0x10f)
    var flagpoleCollisionYPos: Byte by Access(0x70f)
    var stompChainCounter: Byte by Access(0x484)

    inner class VramBuffer(val ramOffset: Int): VramBytes {
        var offset: Byte by Access(ramOffset + 0)
        val wholeBuffer = RangeAccess(ramOffset + 1, 0x340 - 0x301)
        override val bytes: ByteArray get() {
            var zeroIndex = wholeBuffer.start
            while (wholeBlock[zeroIndex] != 0.toByte()) zeroIndex++
            return wholeBlock.copyOfRange(wholeBuffer.start, zeroIndex)
        }
    }
    interface VramBytes { val bytes: ByteArray }
    val vRAMBuffer1 = VramBuffer(0x300)
    val vRAMBuffer2 = VramBuffer(0x340)

    var vRAMBufferAddrCtrl: Byte by Access(0x773)

    var sprite0HitDetectFlag: Boolean by BooleanAccess(0x722)
    var disableScreenFlag: Boolean by BooleanAccess(0x774)
    var disableIntermediate: Byte by Access(0x769)
    var colorRotateOffset: Byte by Access(0x6d4)
    var terrainControl: Byte by Access(0x727)
    var areaStyle: Byte by Access(0x733)
    var foregroundScenery: Byte by Access(0x741)
    var backgroundScenery: Byte by Access(0x742)
    var cloudTypeOverride: Byte by Access(0x743)
    var backgroundColorCtrl: Byte by Access(0x744)
    var areaType: Byte by Access(0x74e)
    var areaAddrsLOffset: Byte by Access(0x74f)
    var areaPointer: Byte by Access(0x750)
    var playerEntranceCtrl: Byte by Access(0x710)
    var gameTimerSetting: Byte by Access(0x715)
    var altEntranceControl: Byte by Access(0x752)
    var entrancePage: Byte by Access(0x751)
    var numberOfPlayers: Byte by Access(0x77a)
    var warpZoneControl: Byte by Access(0x6d6)
    var changeAreaTimer: Byte by Access(0x6de)
    var multiLoopCorrectCntr: Byte by Access(0x6d9)
    var multiLoopPassCntr: Byte by Access(0x6da)
    var fetchNewGameTimerFlag: Byte by Access(0x757)
    var gameTimerExpiredFlag: Byte by Access(0x759)
    var primaryHardMode: Byte by Access(0x76a)
    var secondaryHardMode: Byte by Access(0x6cc)
    var worldSelectNumber: Byte by Access(0x76b)
    var worldSelectEnableFlag: Byte by Access(0x7fc)
    var continueWorld: Byte by Access(0x7fd)
    var currentPlayer: Byte by Access(0x753)
    var playerSize: Byte by Access(0x754)
    var playerStatus: Byte by Access(0x756)
    var onscreenPlayerInfo: Byte by Access(0x75a)
    var numberofLives: Byte by Access(0x75a)
    var halfwayPage: Byte by Access(0x75b)
    var levelNumber: Byte by Access(0x75c)
    var hidden1UpFlag: Byte by Access(0x75d)
    var coinTally: Byte by Access(0x75e)
    var worldNumber: Byte by Access(0x75f)
    var areaNumber: Byte by Access(0x760)
    var coinTallyFor1Ups: Byte by Access(0x748)
    var offscreenPlayerInfo: Byte by Access(0x761)
    var offScrNumberofLives: Byte by Access(0x761)
    var offScrHalfwayPage: Byte by Access(0x762)
    var offScrLevelNumber: Byte by Access(0x763)
    var offScrHidden1UpFlag: Byte by Access(0x764)
    var offScrCoinTally: Byte by Access(0x765)
    var offScrWorldNumber: Byte by Access(0x766)
    var offScrAreaNumber: Byte by Access(0x767)
    var balPlatformAlignment: Byte by Access(0x3a0)
    var platformXScroll: Byte by Access(0x3a1)
    var platformCollisionFlag: Byte by Access(0x3a2)
    var yPlatformTopYPos: Byte by Access(0x401)
    var yPlatformCenterYPos: Byte by Access(0x58)
    var brickCoinTimerFlag: Byte by Access(0x6bc)
    var starFlagTaskControl: Byte by Access(0x746)
    val pseudoRandomBitReg = RangeAccess(0x7a7, 8)
    var warmBootValidation: Boolean by BooleanAccess(0x7ff, trueValue = 0xa5.toByte())
    var sprShuffleAmtOffset: Byte by Access(0x6e0)
    val sprShuffleAmt = RangeAccess(0x6e1, 9999)
    var sprDataOffset: Byte by Access(0x6e4)
    var playerSprDataOffset: Byte by Access(0x6e4)
    var enemySprDataOffset: Byte by Access(0x6e5)
    var blockSprDataOffset: Byte by Access(0x6ec)
    var altSprDataOffset: Byte by Access(0x6ec)
    var bubbleSprDataOffset: Byte by Access(0x6ee)
    var fBallSprDataOffset: Byte by Access(0x6f1)
    var miscSprDataOffset: Byte by Access(0x6f3)
    var sprDataOffsetCtrl: Byte by Access(0x3ee)
    var playerState: Byte by Access(0x1d)
    var enemyState: Byte by Access(0x1e)
    var fireballState: Byte by Access(0x24)
    var blockState: Byte by Access(0x26)
    var miscState: Byte by Access(0x2a)
    var playerMovingDir: Byte by Access(0x45)
    var enemyMovingDir: Byte by Access(0x46)
    var sprObjectXSpeed: Byte by Access(0x57)
    var playerXSpeed: Byte by Access(0x57)
    var enemyXSpeed: Byte by Access(0x58)
    var fireballXSpeed: Byte by Access(0x5e)
    var blockXSpeed: Byte by Access(0x60)
    var miscXSpeed: Byte by Access(0x64)
    var jumpspringFixedYPos: Byte by Access(0x58)
    var jumpspringAnimCtrl: Byte by Access(0x70e)
    var jumpspringForce: Byte by Access(0x6db)
    var sprObjectPageLoc: Byte by Access(0x6d)
    var playerPageLoc: Byte by Access(0x6d)
    var enemyPageLoc: Byte by Access(0x6e)
    var fireballPageLoc: Byte by Access(0x74)
    var blockPageLoc: Byte by Access(0x76)
    var miscPageLoc: Byte by Access(0x7a)
    var bubblePageLoc: Byte by Access(0x83)
    var sprObjectXPosition: Byte by Access(0x86)
    var playerXPosition: Byte by Access(0x86)
    var enemyXPosition: Byte by Access(0x87)
    var fireballXPosition: Byte by Access(0x8d)
    var blockXPosition: Byte by Access(0x8f)
    var miscXPosition: Byte by Access(0x93)
    var bubbleXPosition: Byte by Access(0x9c)
    var sprObjectYSpeed: Byte by Access(0x9f)
    var playerYSpeed: Byte by Access(0x9f)
    var enemyYSpeed: Byte by Access(0xa0)
    var fireballYSpeed: Byte by Access(0xa6)
    var blockYSpeed: Byte by Access(0xa8)
    var miscYSpeed: Byte by Access(0xac)
    var sprObjectYHighPos: Byte by Access(0xb5)
    var playerYHighPos: Byte by Access(0xb5)
    var enemyYHighPos: Byte by Access(0xb6)
    var fireballYHighPos: Byte by Access(0xbc)
    var blockYHighPos: Byte by Access(0xbe)
    var miscYHighPos: Byte by Access(0xc2)
    var bubbleYHighPos: Byte by Access(0xcb)
    var sprObjectYPosition: Byte by Access(0xce)
    var playerYPosition: Byte by Access(0xce)
    var enemyYPosition: Byte by Access(0xcf)
    var fireballYPosition: Byte by Access(0xd5)
    var blockYPosition: Byte by Access(0xd7)
    var miscYPosition: Byte by Access(0xdb)
    var bubbleYPosition: Byte by Access(0xe4)
    var sprObjectRelXPos: Byte by Access(0x3ad)
    var playerRelXPos: Byte by Access(0x3ad)
    var enemyRelXPos: Byte by Access(0x3ae)
    var fireballRelXPos: Byte by Access(0x3af)
    var bubbleRelXPos: Byte by Access(0x3b0)
    var blockRelXPos: Byte by Access(0x3b1)
    var miscRelXPos: Byte by Access(0x3b3)
    var sprObjectRelYPos: Byte by Access(0x3b8)
    var playerRelYPos: Byte by Access(0x3b8)
    var enemyRelYPos: Byte by Access(0x3b9)
    var fireballRelYPos: Byte by Access(0x3ba)
    var bubbleRelYPos: Byte by Access(0x3bb)
    var blockRelYPos: Byte by Access(0x3bc)
    var miscRelYPos: Byte by Access(0x3be)
    var sprObjectSprAttrib: Byte by Access(0x3c4)
    var playerSprAttrib: Byte by Access(0x3c4)
    var enemySprAttrib: Byte by Access(0x3c5)
    var sprObjectXMoveForce: Byte by Access(0x400)
    var enemyXMoveForce: Byte by Access(0x401)
    var sprObjectYMFDummy: Byte by Access(0x416)
    var playerYMFDummy: Byte by Access(0x416)
    var enemyYMFDummy: Byte by Access(0x417)
    var bubbleYMFDummy: Byte by Access(0x42c)
    var sprObjectYMoveForce: Byte by Access(0x433)
    var playerYMoveForce: Byte by Access(0x433)
    var enemyYMoveForce: Byte by Access(0x434)
    var blockYMoveForce: Byte by Access(0x43c)
    var disableCollisionDet: Byte by Access(0x716)
    var playerCollisionBits: Byte by Access(0x490)
    var enemyCollisionBits: Byte by Access(0x491)
    var sprObjBoundBoxCtrl: Byte by Access(0x499)
    var playerBoundBoxCtrl: Byte by Access(0x499)
    var enemyBoundBoxCtrl: Byte by Access(0x49a)
    var fireballBoundBoxCtrl: Byte by Access(0x4a0)
    var miscBoundBoxCtrl: Byte by Access(0x4a2)
    var enemyFrenzyBuffer: Byte by Access(0x6cb)
    var enemyFrenzyQueue: Byte by Access(0x6cd)
    var enemyFlag: Byte by Access(0xf)
    var enemyID: Byte by Access(0x16)
    var playerGfxOffset: Byte by Access(0x6d5)
    var playerXSpeedAbsolute: Byte by Access(0x700)
    var frictionAdderHigh: Byte by Access(0x701)
    var frictionAdderLow: Byte by Access(0x702)
    var runningSpeed: Byte by Access(0x703)
    var swimmingFlag: Byte by Access(0x704)
    var playerXMoveForce: Byte by Access(0x705)
    var diffToHaltJump: Byte by Access(0x706)
    var jumpOriginYHighPos: Byte by Access(0x707)
    var jumpOriginYPosition: Byte by Access(0x708)
    var verticalForce: Byte by Access(0x709)
    var verticalForceDown: Byte by Access(0x70a)
    var playerChangeSizeFlag: Byte by Access(0x70b)
    var playerAnimTimerSet: Byte by Access(0x70c)
    var playerAnimCtrl: Byte by Access(0x70d)
    var deathMusicLoaded: Byte by Access(0x712)
    var flagpoleSoundQueue: Byte by Access(0x713)
    var crouchingFlag: Byte by Access(0x714)
    var maximumLeftSpeed: Byte by Access(0x450)
    var maximumRightSpeed: Byte by Access(0x456)
    var sprObjectOffscrBits: Byte by Access(0x3d0)
    var playerOffscreenBits: Byte by Access(0x3d0)
    var enemyOffscreenBits: Byte by Access(0x3d1)
    var fBallOffscreenBits: Byte by Access(0x3d2)
    var bubbleOffscreenBits: Byte by Access(0x3d3)
    var blockOffscreenBits: Byte by Access(0x3d4)
    var miscOffscreenBits: Byte by Access(0x3d6)
    var enemyOffscrBitsMasked: Byte by Access(0x3d8)
    var cannonOffset: Byte by Access(0x46a)
    var cannonPageLoc: Byte by Access(0x46b)
    var cannonXPosition: Byte by Access(0x471)
    var cannonYPosition: Byte by Access(0x477)
    var cannonTimer: Byte by Access(0x47d)
    var whirlpoolOffset: Byte by Access(0x46a)
    var whirlpoolPageLoc: Byte by Access(0x46b)
    var whirlpoolLeftExtent: Byte by Access(0x471)
    var whirlpoolLength: Byte by Access(0x477)
    var whirlpoolFlag: Byte by Access(0x47d)
    var vineFlagOffset: Byte by Access(0x398)
    var vineHeight: Byte by Access(0x399)
    var vineObjOffset: Byte by Access(0x39a)
    var vineStartYPosition: Byte by Access(0x39d)
    var blockOrigYPos: Byte by Access(0x3e4)
    var blockBBufLow: Byte by Access(0x3e6)
    var blockMetatile: Byte by Access(0x3e8)
    var blockPageLoc2: Byte by Access(0x3ea)
    var blockRepFlag: Byte by Access(0x3ec)
    var blockResidualCounter: Byte by Access(0x3f0)
    var blockOrigXPos: Byte by Access(0x3f1)
    var boundingBoxULXPos: Byte by Access(0x4ac)
    var boundingBoxULYPos: Byte by Access(0x4ad)
    var boundingBoxDRXPos: Byte by Access(0x4ae)
    var boundingBoxDRYPos: Byte by Access(0x4af)
    var boundingBoxULCorner: Byte by Access(0x4ac)
    var boundingBoxLRCorner: Byte by Access(0x4ae)
    var enemyBoundingBoxCoord: Byte by Access(0x4b0)
    var powerUpType: Byte by Access(0x39)
    var fireballBouncingFlag: Byte by Access(0x3a)
    var fireballCounter: Byte by Access(0x6ce)
    var fireballThrowingTimer: Byte by Access(0x711)
    var hammerEnemyOffset: Byte by Access(0x6ae)
    var jumpCoinMiscOffset: Byte by Access(0x6b7)
    var blockBuffer1: Byte by Access(0x500)
    var blockBuffer2: Byte by Access(0x5d0)
    var hammerThrowingTimer: Byte by Access(0x3a2)
    var hammerBroJumpTimer: Byte by Access(0x3c)
    var miscCollisionFlag: Byte by Access(0x6be)
    var redPTroopaOrigXPos: Byte by Access(0x401)
    var redPTroopaCenterYPos: Byte by Access(0x58)
    var xMovePrimaryCounter: Byte by Access(0xa0)
    var xMoveSecondaryCounter: Byte by Access(0x58)
    var cheepCheepMoveMFlag: Byte by Access(0x58)
    var cheepCheepOrigYPos: Byte by Access(0x434)
    var bitMFilter: Byte by Access(0x6dd)
    var lakituReappearTimer: Byte by Access(0x6d1)
    var lakituMoveSpeed: Byte by Access(0x58)
    var lakituMoveDirection: Byte by Access(0xa0)
    var firebarSpinStateLow: Byte by Access(0x58)
    var firebarSpinStateHigh: Byte by Access(0xa0)
    var firebarSpinSpeed: Byte by Access(0x388)
    var firebarSpinDirection: Byte by Access(0x34)
    var duplicateObjOffset: Byte by Access(0x6cf)
    var numberofGroupEnemies: Byte by Access(0x6d3)
    var blooperMoveCounter: Byte by Access(0xa0)
    var blooperMoveSpeed: Byte by Access(0x58)
    var bowserBodyControls: Byte by Access(0x363)
    var bowserFeetCounter: Byte by Access(0x364)
    var bowserMovementSpeed: Byte by Access(0x365)
    var bowserOrigXPos: Byte by Access(0x366)
    var bowserFlameTimerCtrl: Byte by Access(0x367)
    var bowserFrontOffset: Byte by Access(0x368)
    var bridgeCollapseOffset: Byte by Access(0x369)
    var bowserGfxFlag: Byte by Access(0x36a)
    var bowserHitPoints: Byte by Access(0x483)
    var maxRangeFromOrigin: Byte by Access(0x6dc)
    var bowserFlamePRandomOfs: Byte by Access(0x417)
    var piranhaPlantUpYPos: Byte by Access(0x417)
    var piranhaPlantDownYPos: Byte by Access(0x434)
    var piranhaPlantYSpeed: Byte by Access(0x58)
    var piranhaPlantMoveFlag: Byte by Access(0xa0)
    var fireworksCounter: Byte by Access(0x6d7)
    var explosionGfxCounter: Byte by Access(0x58)
    var explosionTimerCounter: Byte by Access(0xa0)
    var squ2NoteLenBuffer: Byte by Access(0x7b3)
    var squ2NoteLenCounter: Byte by Access(0x7b4)
    var squ2EnvelopeDataCtrl: Byte by Access(0x7b5)
    var squ1NoteLenCounter: Byte by Access(0x7b6)
    var squ1EnvelopeDataCtrl: Byte by Access(0x7b7)
    var triNoteLenBuffer: Byte by Access(0x7b8)
    var triNoteLenCounter: Byte by Access(0x7b9)
    var noiseBeatLenCounter: Byte by Access(0x7ba)
    var squ1SfxLenCounter: Byte by Access(0x7bb)
    var squ2SfxLenCounter: Byte by Access(0x7bd)
    var sfxSecondaryCounter: Byte by Access(0x7be)
    var noiseSfxLenCounter: Byte by Access(0x7bf)
    var pauseSoundQueue: Byte by Access(0xfa)
    var square1SoundQueue: Byte by Access(0xff)
    var square2SoundQueue: Byte by Access(0xfe)
    var noiseSoundQueue: Byte by Access(0xfd)
    var areaMusicQueue: Byte by Access(0xfb)
    var eventMusicQueue: Byte by Access(0xfc)
    var square1SoundBuffer: Byte by Access(0xf1)
    var square2SoundBuffer: Byte by Access(0xf2)
    var noiseSoundBuffer: Byte by Access(0xf3)
    var areaMusicBuffer: Byte by Access(0xf4)
    var eventMusicBuffer: Byte by Access(0x7b1)
    var pauseSoundBuffer: Byte by Access(0x7b2)
    var musicData: Byte by Access(0xf5)
    var musicDataLow: Byte by Access(0xf5)
    var musicDataHigh: Byte by Access(0xf6)
    var musicOffsetSquare2: Byte by Access(0xf7)
    var musicOffsetSquare1: Byte by Access(0xf8)
    var musicOffsetTriangle: Byte by Access(0xf9)
    var musicOffsetNoise: Byte by Access(0x7b0)
    var noteLenLookupTblOfs: Byte by Access(0xf0)
    var dACCounter: Byte by Access(0x7c0)
    var noiseDataLoopbackOfs: Byte by Access(0x7c1)
    var noteLengthTblAdder: Byte by Access(0x7c4)
    var areaMusicBufferAlt: Byte by Access(0x7c5)
    var pauseModeFlag: Byte by Access(0x7c6)
    var groundMusicHeaderOfs: Byte by Access(0x7c7)
    var altRegContentFlag: Byte by Access(0x7ca)

    // NES stuff
    //r    val ppuCtrlReg1: Byte by Access(0x2000)
    //r    val ppuCtrlReg2: Byte by Access(0x2001)
    //r    val ppuStatus: Byte by Access(0x2002)
    //r    val ppuSpraddr: Byte by Access(0x2003)
    //r    val ppuSprdata: Byte by Access(0x2004)
    //r    val ppuScrollreg: Byte by Access(0x2005)
    //r    val ppuAddress: Byte by Access(0x2006)
    //r    val ppuData: Byte by Access(0x2007)
    //r    val sndRegister: Byte by Access(0x4000)
    //r    val sndSquare1reg: Byte by Access(0x4000)
    //r    val sndSquare2reg: Byte by Access(0x4004)
    //r    val sndTrianglereg: Byte by Access(0x4008)
    //r    val sndNoisereg: Byte by Access(0x400c)
    //r    val sndDeltareg: Byte by Access(0x4010)
    //r    val sndMasterctrlreg: Byte by Access(0x4015)
    //r    val sprdma: Byte by Access(0x4014)
    //r    val joypadPort: Byte by Access(0x4016)
    //r    val joypadPort1: Byte by Access(0x4016)
    //r    val joypadPort2: Byte by Access(0x4017)
}